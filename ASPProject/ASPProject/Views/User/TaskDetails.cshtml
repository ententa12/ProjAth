@model ASPProject.Models.TaskUserControllerViewModel

@{
    ViewBag.Title = "TaskDetails";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}

<div class="row">
    <div class="col">
        @using (Html.BeginForm("ModyfyTask", "User", new { id = Model.Id }, FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.Status, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Zatwierdź zmiany" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col">
        <br /><br />
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.ExpectedTime)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.ExpectedTime)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Time)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Time) minut
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.TeamName)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.TeamName)
            </dd>
        </dl>
        <div id="time" style="padding-bottom:10px;font-size:30px">
            
        </div>

        @if (Model.InWork)
        {
            <input type="button" class="btn btn-primary" value="Stop" onclick="location.href='@Url.Action("EndWork", "User", new { id = Model.Id })'" />

        }
        else
        {
            <input type="button" class="btn btn-primary" value="Start" onclick="location.href='@Url.Action("StartWork", "User", new { id = Model.Id })'" />
        }
    </div>
    <br /><br />
</div>
<div class="row">
    @Html.Action("WorkDetails")
</div>
@section Scripts{
<script>
        window.setInterval(function () {
            var temp = '@Model.InWork';
            if (temp === "True") {
                let min;
                min = @((DateTime.Now.TimeOfDay.TotalMinutes - Model.StartTime.Value.TotalMinutes).ToString());
                document.getElementById("time").innerHTML = min + "min";
            }
        }, 1000);
</script>
}